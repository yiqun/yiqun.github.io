实现：UTF-8文件编码检测, PHP语法检测，JS语法检测
# 安装PHP，安装过程略
# 安装JS
	{{{class="brush:bash"
			#Ubuntu
			sudo apt-get install spidermonkey-bin
			#CentOS
			curl -O http://ftp.mozilla.org/pub/mozilla.org/js/js-1.7.0.tar.gz
			tar zxvf js-1.7.0.tar.gz
			cd js/src
			make -f Makefile.ref
			mv Linux_All_DBG.OBJ/js /usr/local/bin/
		}}}
# 配置JSLINT
	{{{class="brush:bash"
			#Ubuntu下js路径由/usr/local/bin/js改为/usr/bin/js
			curl -o /usr/local/bin/jslint https://github.com/douglascrockford/JSLint/blob/master/jslint.js
			chmod +x /usr/local/bin/jslint
			echo -e '#!/usr/local/bin/js\nif(typeof Object.create==="undefined"){Object.create=function(o){function F(){}F.prototype=o;return new F()}}if(!Object.keys){Object.keys=(function(){var hasOwnProperty=Object.prototype.hasOwnProperty,hasDontEnumBug=!({toString:null}).propertyIsEnumerable("toString"),dontEnums=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],dontEnumsLength=dontEnums.length;return function(obj){if(typeof obj!=="object"&&typeof obj!=="function"||obj===null){throw new TypeError("Object.keys called on non-object")}var result=[];for(var prop in obj){if(hasOwnProperty.call(obj,prop)){result.push(prop)}}if(hasDontEnumBug){for(var i=0;i<dontEnumsLength;i++){if(hasOwnProperty.call(obj,dontEnums[i])){result.push(dontEnums[i])}}}return result}})()};\n' | cat - /usr/local/bin/jslint > ~tmp && mv -f ~tmp /usr/local/bin/jslint
			echo -e '\nvar src=(function(args){if(args.length>0){var str="";for(var i=0;i<args.length;i++){str+=args[i]}return str}return""})(arguments);JSLINT(src,{browser:true,indent:2});var ers=JSLINT.errors,ersl=ers.length;if(ersl>0){var e=ers[0];print((e.reason.substr(-1)=="."?e.reason.substr(0,e.reason.length-1):e.reason)+" - on line "+e.line)};' >> /usr/local/bin/jslint
		}}}
# 配置pre-commit
	{{{class="brush:php"
#!/usr/bin/php
<?php
error_reporting(7);
set_time_limit(0);
// Set these manually since Subversion doesn't set ENV
$PHP = '/usr/bin/php';
$JSLINT = '/usr/local/bin/jslint';
$SVNLOOK = '/usr/bin/svnlook';
$AWK = '/usr/bin/awk';
$GREP = '/bin/egrep';
$SED = '/bin/sed';
$PHPCS = '/usr/bin/phpcs';
$PHPCSCONF = '/var/www/svn/conf/phpcs.xml';
$IGNORERULES = array(
  '.jpg', '.jpeg', '.png', '.gif',
  '.csv', '.xls', '.xlst', '.property', '.properties',
  'plugins/', 'vendor/'
  //array('regexp', '/index\.php/')
);

$REPOS = $argv[1];
$TXN = $argv[2];

$errors = Array();

// Check comment
$comment_length = `$SVNLOOK log -t '$TXN' '$REPOS'`;
if (strlen($comment_length) < 6){ 
  $errors[] = 'Please provide a meaningful comment when committing changes';
}


else {

  // Find the changes
  $CHANGED=`$SVNLOOK changed -t "$TXN" "$REPOS" | $GREP "^[U|A]" | $AWK '{print $2}'`;
  // As an array
  $CHANGED = explode("\n",trim(rtrim($CHANGED)));

  /** 
   * Detects the end-of-line character of a string.
   * @param string $str The string to check.
   * @return boolean
   */
  function detectLF($str){
    $es = array_count_values(str_split(preg_replace("/[^\r\n]/", "", $str)));
    $ea = array_keys($es, max($es));
    return in_array(bin2hex(implode("", $ea)),array("000a", "0a"));
  }

  // Perform specific actions based on the file extension 
  foreach($CHANGED as $FILE){

    // skip ignore list
    if (!empty($IGNORERULES)) {
      foreach ($IGNORERULES as $in) {
        if (is_string($in)) {
          if ('/' === substr($in, 0, 1)) {
            if (0 === strcasecmp("/$FILE", $in)) {
              continue 2;
            }
          } elseif (FALSE !== stripos($FILE, $in)) {
            continue 2;
          }
        } elseif (is_array($in) && !empty($in[0]) && !empty($in[1]) && 'regexp' == $in[0]) {
          try {
            $match = preg_match($in[1], $FILE);
            if ($match) {
              continue 2;
            }
          } catch (Exception $e){
          }
        }
      }
    }


    // Get extension
    $ext = pathinfo($FILE,PATHINFO_EXTENSION);

    $outputs = array();

    /**
     * Detect encoding, eol, tab, syntax
     */
    $content = `$SVNLOOK cat -t '$TXN' '$REPOS' '$FILE'`;

    // Detect encoding
    if (!mb_detect_encoding($content, 'UTF-8', TRUE)){
      $errors[] = "Only UTF-8 files can be committed ('$FILE')";
    }

    // Detect eol
    if (!detectLF($content)){
      $errors[] = "File EOL must use LF ('$FILE')";
    }

    // Detect tab
    $contents = explode("\n", $content);
    $contents_length = count($contents);
    for($ii=1;$ii<=$contents_length;$ii++){
      if (preg_match('/\t/is', $contents[$ii-1])){
        $errors[] = "$FILE contains 'Tab' character - on line $ii";
      }
    }

    // Detect syntax
    $outputs = array();

    switch($ext){

    case 'php':
      $msg = exec("$SVNLOOK cat -t '$TXN' '$REPOS' '$FILE' | $PHP -l 2>&1", $outputs);
      array_pop($outputs);
      foreach ($outputs as $op) {
        $errors[] = $FILE. ': {{ '.$op. ' }}';
      }

      if (count($outputs)) {
        break;
      }

      // phpcs
      $msg = exec("$SVNLOOK cat -t '$TXN' '$REPOS' '$FILE' | $PHPCS -n --standard=$PHPCSCONF 2>&1", $outputs);

      if (count($outputs)) {
        foreach ($outputs as $op) {
          preg_match('/^\s*(\d+)\s*\|\s*(ERROR|WARNING)\s*\|(.*)$/i', $op, $match);
          if (count($match)){
            $errors[] = $FILE. ': {{ '. $match[2]. $match[3]. ' on line '. $match[1]. ' }}';
          }
        }
      }

      break;

    case 'js':
      $msg = exec("$JSLINT \"`$SVNLOOK cat -t '$TXN' '$REPOS' '$FILE'`\" 2>&1", $outputs);
      foreach ($outputs as $op) {
        $errors[] = $FILE.': {{ '.$op.' }}';
      }
      break;
    }
  }
}

// Print all the errors in a nice list
if(count($errors) > 0){
  error_log("**********************************************************************\n Please correct the following errors before commiting these changes \n**********************************************************************");
  for($i = 1;$i <= count($errors);$i++){
    error_log("$i. " . $errors[($i - 1)]);
  }
  exit(-1);
}
}}}

phpcs.xml
{{{class="brush:xml"
<ruleset name="Custom coding standard">
 <description>Andrew Li's coding standard</description>
 
 <rule ref="PEAR"/>
 <rule ref="PEAR.WhiteSpace.ScopeIndent">
   <properties>
	   <property name="indent" value="2"/>
	 </properties>
 </rule>
</ruleset>
	}}}
	
额外
- PHP文档注释标准
{{{
/**
 * Test php file
 *
 * PHP version 5
 *
 * @category Test
 * @package  Test
 * @author   Andrew Li <tinray1024@gmail.com>
 * @license  http://yiqun.github.io Andrew Li
 * @version  $Rev: 33 $ 
 * @link     http://yiqun.github.io
 * @modified $Author: andrew $
 * @since    $Date: 2014-02-07 16:13:51 +0800 (Fri, 07 Feb 2014) $
 */
	}}}
- 给beta版静态文件附加版本信息，stable版则去掉
{{{class="brush:php"
define('MODE', 'BETA'); // STABLE
/**
 * Process svn $,Rev and last $
 *
 * @param string $rev Svn reversion string
 *
 * @return string
 */
function ProcessSvnChars($rev)
{
  return MODE == 'STABLE'? '': '?v='. substr(substr($rev, 6), 0, -2);
}

// script
/*
<script type="text/javascript" src="/path/to/js/file<?php echo ProcessSvnChars('$Rev$')?>"></script>
*/
}}}
